id=001,first
fullrecord = FullRecordAsXML
all_fields_tsearch = custom, getAllSearchableFieldsAsSet(100, 900)

title_tsearch_stored = 245a, cleanEnd
title_ssort_stored = 245abnp, join(" : "), clean, titleSortLower, first
title_sub_tsearch_stored = 245b, cleanEnd
title_vern_tsearch_stored = LNK245abnp:LNK700tfnp:LNK710tfnp:LNK711atfnp:LNK740anp
title_added_entry_tsearch_stored = 700tfnp:710tfnp:711atfnp:740anp
title_series_tsearch_stored = 440anp:490a?(ind1 != '1'):800tfnp:830afnp:810tfnp:811tfnp
title_notes_tsearch_stored = 505a
title_uniform_tsearch_stored = 130adflnp:240aflnp
title_alternate_tsearch_stored = 246abfnp:780st:785st:773st:111tfnp
journal_title_ssort_stored = 245ab ? (000[7] = 's' ), join(" : "), titleSortLower, first
journal_title_tsearch_stored = {245a:LNK245a} ? (000[7] = 's' )
journal_title_addnl_tsearch_stored = {245b:LNK245b:245np:130adfnp:240afnp:246abfnp:700tfnp:710tfnp:711atfnp:740anp:780st:785st:773st:111tfnp:440anp:490a:800tfnp:830afnp:810tfnp:811tfnp:505a} ? (000[7] = 's' )

author_tsearch = 100abcdeq4:110abcde4:111acdejnq4:LNK100abcdeq4:LNK110abcde4:LNK111acdejnq4, cleanEnd, relator_map.properties, unique
author_a = 100abcdeq4:110abcde4:111acdeq4, relator_map.properties, cleanEnd, unique
author_vern_a = LNK100ab:LNK110a:LNK111a:LNK700a:LNK710a:LNK711a, relator_map.properties, clean, unique
author_director_tsearchf_stored = custom(org.solrmarc.mixin.DirectorMixin), getVideoDirector
#author_f = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEnd
#author_facet = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEnd
author_facet_f_stored = 100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a, cleanEach, format("d=> [%d]", "e=>(%d)", "4=>(%d)"), relator_map.properties, join(" ")
author_added_entry_tsearch_stored = 700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a:LNK700abcdeq4:LNK710acdejq4:LNK711acdejq4:LNK800abcdeq4:LNK810abcde4:LNK811acdejq4:LNK773a, clean, relator_map.properties, unique
author_ssort_stored = 100abcdeq4:110abcde4:111acdeq4, titleSortLower, relator_map.properties, first

subject_tsearchf_stored = {600[a-z]:610[a-z]:611[a-z]:630[a-z]:650[a-z]:651[a-z]:655[a-z]:690[a-z]}?(ind2!=7|(ind2 = 7 & $2 matches "fast|lcsh|tgn|aat|rbprov|rbpap|rbgenr|rbbin|rbpri|rbtyp")), join(" "), clean, unique
subject_summary_tsearch_stored = 520ab
subject_era_tsearchf_stored = 650d:650y:651y:655y, clean
topic_form_genre_f_stored = 650a:650b:650x:655a, clean, unique
region_f_stored = custom, getRegionFacet

#                        "Recordings and/or Scores".
recording_format_f_stored = 000[6] ? ([6] matches "[cdj]"), (map.recording_type)
map.recording_type.j = Musical
map.recording_type.i = Non-Musical
composition_era_f_stored = custom(org.solrmarc.mixin.MusicEra), getEra, music_maps.properties(composition_era)
music_composition_form_tsearchf_stored = 008[18-19]:047a ? (000[6] matches "[cdj]"), music_maps.properties(composition_type)
instrument_raw_a = 048[a-z]
instrument_f_stored = 048a[0-1]:048b[0-1], instrument_map.properties, unique

medium_a = 245h, (pattern_map.medium), first
form_a = 245k, clean
date_coverage_a = 245f
date_bulk_coverage_a = 245g
local_notes_tsearch_stored = 946a

pattern_map.medium.pattern_0 = [Ss]ound[ ]+recording=>sound recording
pattern_map.medium.pattern_1 = [Vv]ideo[-]?recording=>videorecording
pattern_map.medium.pattern_2 = [Ee]lectronic book=>electronic book
pattern_map.medium.pattern_3 = [Ee]lectronic [a-z]*=>electronic resource
pattern_map.medium.pattern_4 = [Mm]icro(form|film|fiche)=>microform
pattern_map.medium.pattern_5 = [Mm]icrofiche=>microform
pattern_map.medium.pattern_6 = [Ss]lide=>slide
pattern_map.medium.pattern_7 = CD=>sound recording
pattern_map.medium.pattern_8 = DVD=>videorecording
pattern_map.medium.pattern_9 = [Cc]omputer[ ]*file=>computer file
pattern_map.medium.pattern_10 = [Mm]anuscript=>manuscript
pattern_map.medium.pattern_11 = [Pp]icture=>picture
pattern_map.medium.pattern_12 = \b[Gg]raphic\b=>graphic
pattern_map.medium.pattern_13 = [Mm]ap=>cartographic material
pattern_map.medium.pattern_13 = [Cc]artographic material=>cartographic material
pattern_map.medium.pattern_14 = [Ss]eries record=>series record
pattern_map.medium.pattern_15 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_16 = [Aa]rt reproduction=>art reproduction
pattern_map.medium.pattern_17 = [Aa]rt original=>art original
pattern_map.medium.pattern_18 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_19 = ^([Cc]hart|[Kk]it|[Bb]raille|[Rr]ealia|[Gg]ame|[Ee]quipment|[Ff]ilmstrip|[Ww]ebsite|[Tt]ransparency|[Mm]odel)$=>$1


work_title1_key_ssort_stored =  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", "100aq:100aq:110a:700aq:111ac, titleSortLower, first" ,"/"), filter("[ ]=>_")

work_title2_key_ssort_stored =  getComplexJoinedFields("240a:240a:130a:245ab,titleSortLower, first", "100aq:100aq:110a:700aq:111ac, titleSortLower, first", "getPrimaryContentType, filter(\"ContentType.=>\")", "/"), filter("[ ]=>_")

isbn_isbn_stored = 020a,  custom_map(org.solrmarc.mixin.ISBNNormalizer filterISBN(both)), unique
issn_e_stored = 022a, map("([- 0-9]*[0-9Xx]).*=>$1"), unique
lccn_lccn_stored = 010a, map("([- 0-9]*[0-9Xx]).*=>$1"), unique
oclc_e_stored = 035a:035z, filter("^(?:(?:[(]OCoLC[)])|(?:[(]OCoLC[)])?(?:(?:ocm)|(?:ocn)|(?:on)))(\d+)$=>$1", "[^0-9]=>")
upc_e_stored = 024a ? (ind1 = '1' | (ind1 = '7' & $2 = "upc")), filter("[^0-9]=>"), unique

#these three lines delete barcodes associated with not-yet-ordered Patron Driven Acquisition items 
barcode_e_stored = 999i, (map.barcode)
map.barcode.COUTTS=null
map.barcode.displayRawIfMissing=true

#date published and range
published_daterange = 008[7-14]?((008[6] == 'i' |008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>[$1 TO $2]","(\\d\\d)uu(\\d\\d\\d\\d)=>$2","(\\d\\d\\d)u(\\d\\d\\d\\d)=>$2"),
         sort(str, asc), first
published_daterange ?= 008[7-14]?((008[6] == 'e')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)=>$1-$2-$3"),
         sort(str, asc), first
published_daterange ?= {008[07-10]:008[11-14]}?((008[6] == 'c')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>[$2 TO $1]","(\\d\\d)uu(\\d\\d\\d\\d)=>$2","(\\d\\d\\d)u(\\d\\d\\d\\d)=>$2"),
         sort(str, asc), first
published_daterange ?= 008[7-10]?((008[6] == 'i' | 008[6] == 'c' | 008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q' | 008[6] == 'u')&& 008[11-14] == "9999"),
         map("(\\d\\d\\d\\d)=>[$1 TO *]","(\\d\\d)uu=>[$100 TO $199]", "(\\d\\d\\d)u=>[$10 TO $19]"), 
         sort(str, asc), first
published_daterange ?= {008[07-10]:008[11-14]}?(008[6] == 'r' | 008[6] == 'p' | 008[6] == 'u'), map("(\\d\\d\\d\\d)=>$1"), sort(str, asc), first
published_daterange ?= 008[7-10]?(008[6] == 's'), map(".*?(\\d\\d\\d\\d).*=>$1"), map("(.*)=>$1"), sort(str, asc), first 
published_daterange ?= 260c:264c?(ind1 = '1' || ind1 = ' '), map(".*?(\\b\\d\\d\\d\\d\\b).*=>$1"), map("(.*)=>$1"), sort(str, asc), first
#published_daterange ?= 999a, map(".*(\\d\\d\\d\\d)=>$1")
#published_daterange ?= getComplexJoinedFields("999a, map(\".*(\\b(19|20)\\d\\d\\b)=>[$1\"), sort(num, asc), first",  "999a, map(\".*(\\b(19|20)\\d\\d\\b)=>$1]\"), sort(num, desc), first", " TO ")
# published_daterange ?= getComplexJoinedFields("999a, map(\".*(\\d\\d\\d\\d)=>[$1\"), sort(num, asc), first",  "999a, map(\".*(\\d\\d\\d\\d)=>$1]\"), sort(num, desc), first", " TO ")

published_date += 008[7-14]?((008[6] == 'i' |008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d(\\d|u)(\\d|u)u)(\\d\\d\\d\\d)=>$4-01-01T00:00:00Z","(\\d\\d\\d\\d)(\\d(\\d|u)(\\d|u)u)=>$1-01-01T00:00:00Z"
),
         sort(str, asc), first
published_date += 008[7-14]?((008[6] == 'e')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)=>$1-$2-$3T00:00:00Z"),
         sort(str, asc), first
published_date += {008[07-10]:008[11-14]}?((008[6] == 'c')&& 008[11-14] != "9999"),
         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d\\d)u=>$10-01-01T00:00:00Z","(\\d\\d)uu=>$100-01-01T00:00:00Z"),
         sort(str, asc), first
published_date += 008[7-10]?((008[6] == 'i' | 008[6] == 'c' | 008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q' | 008[6] == 'u' | 008[6] == 'n')&& 008[11-14] == "99
99"),
         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d)uu=>$150-06-01T00:00:00Z", "(\\d\\d\\d)u=>$15-06-01T00:00:00Z"),
         sort(str, asc), first
published_date ?= {008[07-10]:008[11-14]}?(008[6] == 'r' | 008[6] == 'p' | 008[6] == 'u' | 008[6] == 's' | 008[6] == ' ' | 008[6] == 'n' | 008[6] == 'q'),
         map("(\\d\\d\\d\\d)=>$1-01-01T00:00:00Z","(\\d\\d\\d)u=>$15-06-01T00:00:00Z","(\\d\\d)uu=>$150-06-01T00:00:00Z"),
         sort(str, asc), first
published_date ?= 260c:264c?(ind1 = '1' || ind1 = ' '),  map(".*?\\bc?(\\d\\d\\d\\d)\\b.*=>$1-01-01T00:00:00Z"), sort(str, asc), first

published_date ?= 999a, map(".*(\\b(1[789]|20)\\d\\d\\b)=>$1-01-01T00:00:00Z"), sort(num, asc), first

#published_date_a += 008[7-14]?((008[6] == 'i' | 008[6] == 'd' | 008[6] == 'c' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] != "9999"),
#        map("(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>$1","(\\d\\d)uu(\\d\\d\\d\\d)=>$2","(\\d\\d\\d)u(\\d\\d\\d\\d)=>$2"), map("(.*)=>$1-01-01T00:00:00Z"), 
#         sort(str, asc), first
#published_date_a += 008[7-10]?((008[6] == 'i' | 008[6] == 'c' | 008[6] == 'd' | 008[6] == 'm' | 008[6] == 'k' | 008[6] == 'q')&& 008[11-14] == "9999"),
#         map("(\\d\\d\\d\\d)=>$1","(\\d\\d)uu=>$100", "(\\d\\d\\d)u=>$10","(\\d\\d\\d\\d)(\\d\\d\\d\\d)=>$1"), map("(.*)=>$1-01-01T00:00:00Z"), 
#         sort(str, asc), first
#published_date_a += {008[07-10]:008[11-14]}?(008[6] == 'r' | 008[6] == 'p' | 008[6] == 'u'), map("(\\d\\d\\d\\d)=>$1"), map("(.*)=>$1-01-01T00:00:00Z"), sort(str, asc), first
#published_date_a ?= 008[7-10]?(008[6] == 's'), map(".*?(\\d\\d\\d\\d).*=>$1"), map("(.*)=>$1-01-01T00:00:00Z"), sort(str, asc), first 
#published_date_a ?= 260c:264c?(ind1 = '1'), map(".*?(\\d\\d\\d\\d).*=>$1"), map("(.*)=>$1-01-01T00:00:00Z"), sort(str, asc), first 
#published_date_a ?= 999a, map(".*(\\d\\d\\d\\d)=>$1"), map("(.*)=>$1-01-01T00:00:00Z")

summary_holdings_a =  custom, getSummaryHoldingsInfo(library_map.properties, location_map_2.properties)
date_indexed_f_stored = dateRecordIndexed
source_f_stored = "Library Catalog"


url_a = custom, getLabelledURLnew("")
url_supp_a = custom, getLabelledSupplURLnew("")

# special field for video material
release_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getOriginalReleaseDate
video_run_time_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoRunTime
video_rating_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoRating
video_target_audience_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoTargetAudience
# appears above as "author_director_tsearchf_stored"
#video_director_tsearch_stored = custom(org.solrmarc.mixin.DirectorMixin), getVideoDirector

video_genre_tsearch_stored = custom(org.solrmarc.mixin.VideoInfoMixin), getVideoGenre


# facets

format_f_stored = custom(org.solrmarc.mixin.GetFormatMixin), getContentTypesAndMediaTypes, getformat_mixin_map.properties, unique
video_format_f_stored = custom(org.solrmarc.mixin.GetFormatMixin), getContentTypesAndMediaTypes, getvideoformat_mixin_map.properties, unique
library_f_stored = custom, getCustomLibrary(shadowed_location_map.properties, library_map.properties)
location_f_stored = custom, getCustomLocation(location_map_2.properties, shadowed_location_map.properties, library_map.properties)
location2_f_stored = custom, getCustomLocation(location_map_3.properties, shadowed_location_map.properties, library_map.properties)
shadowed_location_f_stored = custom, getShadowedLocation(shadowed_location_map.properties, returnHIDDEN, extraIds)
language_f_stored = 008[35-37]:041a:041d , language_map.properties, unique, first
language_f_stored += 041a:041d , language_map.properties, unique, notfirst, map("^(.*$)=>$1 (also in)")
language_f_stored += 041b ? (000[6] matches "[at]") , language_map.properties, map("^(.*$)=>$1 (summary in)")
language_f_stored += 041b ? (!(000[6] matches "[at]")) , language_map.properties, map("^(.*)$=>$1 (subtitles in)")
language_f_stored += 041h ? (000[6] = "g") , language_map.properties, map("^(.*)$=>$1 (dubbed in)")
language_f_stored += 041h ? (000[6] != "g") , language_map.properties, map("^(.*)$=>$1 (translated from)")

# use FileLookupMixin to get date received_facet and fund_code_facet from sorted text file
date_received_f_stored = getFromFileBy001("extra_data/booklists_all.txt", "[|]", ""), mapLookupSelect("[|]",0)
fund_code_f_stored = getFromFileBy001("extra_data/booklists_all.txt", "[|]", ""), mapLookupSelect("[|]",1), mapLookupSplit(":")

date_first_indexed_f_stored = getFromFileBy001("extra_data/new_recs_dates_sorted.txt", 20131118)



# PDA fields

pda_coutts_library_a = 949h, (pattern_map.libcoutts)
pda_catkey_a = 001?(949$h matches ".*-[EP]PDA")
pda_isbn_a = 911a

pattern_map.coutts.pattern_0=.*-PPDA=>pda_print
pattern_map.coutts.pattern_1=.*-EPDA=>pda_ebook

pattern_map.catkey.pattern_0=[Uu](.*):.*-[EP]PDA=>u$1
pattern_map.libcoutts.pattern_0=AL-PPDA=>ALD
pattern_map.libcoutts.pattern_1=AS-PPDA=>ASTRO
pattern_map.libcoutts.pattern_2=CH-PPDA=>CHEM
pattern_map.libcoutts.pattern_3=CL-PPDA=>CLEM
pattern_map.libcoutts.pattern_4=FA-PPDA=>FINE ARTS
pattern_map.libcoutts.pattern_5=MA-PPDA=>MATH
pattern_map.libcoutts.pattern_6=MU-PPDA=>MUSIC
pattern_map.libcoutts.pattern_7=PH-PPDA=>PHYS
pattern_map.libcoutts.pattern_8=SE-PPDA=>SCIENG

# special Call Number fields to handle COUTTS PDA items
#call_number_orig_display = custom, getCallNumbersCleanedNew(true), (map.call_number_coutts)
shelfkey = custom, getUniquishLCShelfKeyIfNotShadowed(unique, shadowed_location_map.properties, returnHIDDEN, extraIds)
reverse_shelfkey = custom, getUniquishReverseLCShelfKeyIfNotShadowed(unique, shadowed_location_map.properties, returnHIDDEN, extraIds)
lc_call_number_e_stored = custom, getTrimmedUniquishLCCallNumber

call_number_broad_f_stored =  custom, getCallNumberPrefixNew(callnumber_map.properties, 1) 
# getCallNumberPrefixNew - selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          and then uses the callnumber_map to map only the first letter of the LC call number
#                          to the broad LC subject description for that single letter.
call_number_narrow_f_stored = custom, getCallNumberPrefixNew(call_number_detail_map.properties, 0)
# getCallNumberPrefixNew - as above, selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          but then uses the a different, more detailed callnumber_map to map the first two letters of 
#                          the first letter of the LC call number to a more detailed LC subject description.  Additionally
#                          for a few two letter combinations, (E, F, GV, PN and Z) the number following the initial letters
#                          are used to further refine the LC subject description. 
#                          to the broad description for that single letter.

call_number_a = custom, getCallNumbersCleanedNewNo050(true), (map.call_number_coutts)
call_number_tsearch = custom, getCallNumbersCleanedNew(false), (map.call_number_coutts)
call_number_ssort_stored=  custom, getCallNumberCleanedNew(sortable)

map.call_number_coutts.COUTTS=null
map.call_number_coutts.displayRawIfMissing=true

leader67_f_stored = 000[6-7]

type_of_record_f_stored = 000[6], (map.type)
map.type.a = Language material
map.type.c = Notated music
map.type.d = Manuscript notated music
map.type.e = Cartographic material
map.type.f = Manuscript cartographic material
map.type.g = Projected medium
map.type.i = Nonmusical sound recording
map.type.j = Musical sound recording
map.type.k = Two-dimensional nonprojectable graphic
map.type.m = Computer file
map.type.o = Kit
map.type.p = Mixed materials
map.type.r = Three-dimensional artifact or naturally occurring object
map.type.t = Manuscript language material
map.type.throwExceptionIfMissing=true

biblevel_f_stored = 000[7], (map.biblevel)
map.biblevel.a = Monographic component part
map.biblevel.b = Serial component part
map.biblevel.c = Collection
map.biblevel.d = Subunit
map.biblevel.i = Integrating resource
map.biblevel.m = Monograph/Item
map.biblevel.s = Serial
map.biblevel.throwExceptionIfMissing=true

media_type_f_stored = getMediaTypes
media_type_mapped_f_stored = getMediaTypes, equipment_from_format.properties, unique


